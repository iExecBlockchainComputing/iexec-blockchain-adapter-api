plugins {
	id 'java'
	id 'io.freefair.lombok' version '8.2.2'
	id 'org.springframework.boot' version '2.7.14'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'jacoco'
	id 'org.sonarqube' version '4.2.1.3168'
	id 'maven-publish'
}

ext {
	openFeignVersion = '11.10'
	testContainersVersion = '1.19.0'
}

if (!project.hasProperty('gitBranch')) {
    ext.gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
}

allprojects {
	group = 'com.iexec.blockchain'
	if (gitBranch != 'main' && gitBranch != 'master' && !(gitBranch ==~ '(release|hotfix|support)/.*')) {
		version += '-NEXT-SNAPSHOT'
	}
	repositories {
		mavenLocal()
		mavenCentral()
		// iExec
		maven {
			url "https://docker-regis-adm.iex.ec/repository/maven-public/"
			credentials {
				username nexusUser
				password nexusPassword
			}
		}
		maven {
			url "https://jitpack.io"
		}
	}
	java {
		toolchain {
			languageVersion.set(JavaLanguageVersion.of(11))
		}
	}
}

sourceSets {
	itest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
		}
	}
}

configurations {
	itestRuntime.extendsFrom testRuntime
	itestImplementation.extendsFrom testImplementation
}

dependencies {
	// Spring framework
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// Spring Doc
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.3'

	// iexec
	implementation "com.iexec.commons:iexec-commons-poco:$iexecCommonsPocoVersion"
	implementation "com.iexec.common:iexec-common:$iexecCommonVersion"

	// feign
	implementation "io.github.openfeign:feign-jackson:$openFeignVersion"
	implementation "io.github.openfeign:feign-slf4j:$openFeignVersion"

	// observability
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

	// integration tests
	implementation project(':iexec-blockchain-adapter-api-library')

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly("org.junit.platform:junit-platform-launcher")
	testImplementation 'org.awaitility:awaitility'

	itestImplementation "org.testcontainers:junit-jupiter:$testContainersVersion"
}

springBoot {
	buildInfo()
}

tasks.named("bootJar") {
	manifest {
		attributes("Implementation-Title": "iExec Blockchain Adapter API",
		           "Implementation-Version": project.version)
	}
}

tasks.register("itest", Test) {
	doFirst {
		exec {
			commandLine 'docker', 'compose', 'pull', '-q'
		}
	}
	group 'Verification'
	description 'Runs the integration tests.'
	setTestClassesDirs(sourceSets.itest.output)
	classpath = sourceSets.itest.runtimeClasspath
}

publishing {
	publications {
		maven(MavenPublication) {
			artifact tasks.named("bootJar")
			from components.java
		}
	}
	repositories {
		maven {
			credentials {
				username nexusUser
				password nexusPassword
			}
			url = project.hasProperty("nexusUrl")? project.nexusUrl: ''
		}
	}
}

tasks.withType(Test).configureEach {
	finalizedBy jacocoTestReport
	useJUnitPlatform()
}

// sonarqube code coverage requires jacoco XML report
jacocoTestReport {
    reports {
        xml.required = true
    }
}
tasks.sonarqube.dependsOn tasks.jacocoTestReport

ext.jarPathForOCI  = relativePath(tasks.bootJar.outputs.files.singleFile)
ext.gitShortCommit = 'git rev-parse --short=8 HEAD'.execute().text.trim()
ext.ociImageName   = 'local/' + ['bash', '-c', 'basename $(git config --get remote.origin.url) .git'].execute().text.trim()

tasks.register('buildImage', Exec) {
    group 'Build'
    description 'Builds an OCI image from a Dockerfile.'
    dependsOn bootJar
    commandLine("sh", "-c", "docker build -f docker/Dockerfile --build-arg jar=$jarPathForOCI -t $ociImageName:$gitShortCommit ."
            + " && docker tag $ociImageName:$gitShortCommit $ociImageName:dev")
}
