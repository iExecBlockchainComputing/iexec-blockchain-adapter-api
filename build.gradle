plugins {
	id 'java'
	id 'org.springframework.boot' version '2.6.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'jacoco'
	id 'org.sonarqube' version '3.3'
	id 'maven-publish'
}

ext {
	openFeignVersion = '11.6'
	gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
}

allprojects {
	group = 'com.iexec.blockchain'
	sourceCompatibility = 11
	targetCompatibility = 11
	if (gitBranch != 'main' && gitBranch != 'master' && !(gitBranch ==~ '(release|hotfix|support)/.*')) {
		version += '-NEXT-SNAPSHOT'
	}
	repositories {
		mavenLocal()
		mavenCentral()
		// iExec
		maven {
			url "https://docker-regis-adm.iex.ec/repository/maven-public/"
			credentials {
				username nexusUser
				password nexusPassword
			}
		}
		maven {
			url "https://nexus.intra.iex.ec/repository/maven-public/"
		}
		maven {
			url "https://jitpack.io"
		}
	}
}

configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
	integrationTestImplementation.extendsFrom testImplementation
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.awaitility:awaitility:4.0.1'

	// Spring Doc
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.3'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// iexec
	implementation "com.iexec.common:iexec-common:$iexecCommonVersion"

	// web3j bug required
	// NoSuchMethodError: 'okhttp3.RequestBody okhttp3.RequestBody.create(java.lang.String, okhttp3.MediaType)'
	implementation 'com.squareup.okhttp3:okhttp:4.3.1' // Web3j issue: https://github.com/web3j/web3j/issues/1180
	// NoSuchMethodError: 'byte[] kotlin.collections.ArraysKt.copyInto(byte[], byte[], int, int, int)'
	implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.3.50' // https://stackoverflow.com/a/57907899

	// feign
	implementation "io.github.openfeign:feign-core:$openFeignVersion"
	implementation "io.github.openfeign:feign-jackson:$openFeignVersion"
	implementation "io.github.openfeign:feign-slf4j:$openFeignVersion"

	// integration tests
	implementation project(':iexec-blockchain-adapter-api-library')
}

springBoot {
	buildInfo()
}

sourceSets {
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir 'src/itest/java'
		}
		resources.srcDir 'src/itest/resources'
	}
}

task itestSetup(type: Exec) {
	commandLine 'docker-compose', 'up', '-d'
}

task itestTeardown(type: Exec) {
	commandLine 'docker-compose', 'down'
}

task itest(type: Test) {
	group 'Verification'
	description 'Runs the integration tests.'
	dependsOn   itestSetup
	finalizedBy itestTeardown
	setTestClassesDirs(sourceSets.integrationTest.output)
	classpath = sourceSets.integrationTest.runtimeClasspath
	useJUnitPlatform()
}

jar {
	enabled = true
	archiveClassifier.set('library')
	from sourceSets.main.allSource
	duplicatesStrategy = 'exclude'
}

publishing {
	publications {
		maven(MavenPublication) {
			artifact bootJar
			from components.java
		}
	}
	repositories {
		maven {
			credentials {
				username nexusUser
				password nexusPassword
			}
			url = project.hasProperty("nexusUrl")? project.nexusUrl: ''
		}
	}
}

test {
	useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.7"
}
// sonarqube code coverage requires jacoco XML report
jacocoTestReport {
    reports {
        xml.enabled true
    }
}
tasks.test.finalizedBy    tasks.jacocoTestReport
tasks.sonarqube.dependsOn tasks.jacocoTestReport

ext.jarPathForOCI  = relativePath(tasks.bootJar.outputs.files.singleFile)
ext.gitShortCommit = 'git rev-parse --short=8 HEAD'.execute().text.trim()
ext.ociImageName   = 'local/' + ['bash', '-c', 'basename $(git config --get remote.origin.url) .git'].execute().text.trim()

task buildImage(type: Exec) {
    group 'Build'
    description 'Builds an OCI image from a Dockerfile.'
    commandLine("sh", "-c", "docker build -f docker/Dockerfile --build-arg jar=$jarPathForOCI -t $ociImageName:$gitShortCommit ."
            + " && docker tag $ociImageName:$gitShortCommit $ociImageName:dev")
}

println "nexusUser $nexusUser"
println "nexusPassword $nexusPassword"
